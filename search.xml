<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java集合之arrayList</title>
    <url>/2021/04/08/java%E9%9B%86%E5%90%88%E4%B9%8BarrayList/</url>
    <content><![CDATA[<h5 id="construct"><a href="#construct" class="headerlink" title="construct"></a>construct</h5><p><img src="/2021/04/08/java%E9%9B%86%E5%90%88%E4%B9%8BarrayList/image-20210408174805354.png" alt="image-20210408174805354"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ArrayList(int initialCapacity) &#123;</span><br><span class="line">        if (initialCapacity &gt; 0) &#123;</span><br><span class="line">            this.elementData &#x3D; new Object[initialCapacity];</span><br><span class="line">        &#125; else if (initialCapacity &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            this.elementData &#x3D; EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> public ArrayList() &#123;</span><br><span class="line">        this.elementData &#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"> 可以看到，在无参构造的时候并没有初始化数组，而是在add的时候初始化了一个10的容量，</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h5 id="add"><a href="#add" class="headerlink" title="add"></a>add</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无参构造的时候会初始化大小</span><br><span class="line">private void add(E e, Object[] elementData, int s) &#123;</span><br><span class="line">        if (s &#x3D;&#x3D; elementData.length)</span><br><span class="line">            elementData &#x3D; grow();</span><br><span class="line">        elementData[s] &#x3D; e;</span><br><span class="line">        size &#x3D; s + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void fastRemove(Object[] es, int i) &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        final int newSize;</span><br><span class="line">        if ((newSize &#x3D; size - 1) &gt; i)</span><br><span class="line">            System.arraycopy(es, i + 1, es, i, newSize - i);</span><br><span class="line">        es[size &#x3D; newSize] &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">remove 实际上有一个arrayCopy 的动作    </span><br></pre></td></tr></table></figure>

<h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Object&gt; objects &#x3D; new ArrayList&lt;&gt;(10);</span><br><span class="line">objects.set(5,1);</span><br><span class="line">经典bug  ，源码中有判断  Objects.checkIndex(index, size); 这里随便容量是10，但size还是0</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java集合之hashmap</title>
    <url>/2021/04/06/java%E9%9B%86%E5%90%88%E4%B9%8Bhashmap/</url>
    <content><![CDATA[<h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><ol>
<li>基本数据结构是数组，hash碰撞后采用链表，链表长度超过8后，采用红黑树（1.8）</li>
</ol>
<h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><span id="more"></span>
<p><img src="/2021/04/06/java%E9%9B%86%E5%90%88%E4%B9%8Bhashmap/image-20210406151808653.png" alt="image-20210406151808653"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 创建过程</span><br><span class="line">	1.四个构造方法</span><br><span class="line">		不带参数  this.loadFactor &#x3D; DEFAULT_LOAD_FACTOR; &#x2F;&#x2F; all other fields defaulted 默认的扩容因子 0.75f </span><br><span class="line">			初始划大小 static final int DEFAULT_INITIAL_CAPACITY &#x3D; 1 &lt;&lt; 4; &#x2F;&#x2F; aka 16  1左移4位</span><br><span class="line">		指定初始化大小</span><br><span class="line">        指定初始化大小，和负载因子</span><br><span class="line">        从指定的map,创建一个新的hashmap</span><br><span class="line">    2. put 添加值</span><br><span class="line">    	if ((tab &#x3D; table) &#x3D;&#x3D; null || (n &#x3D; tab.length) &#x3D;&#x3D; 0)</span><br><span class="line">            n &#x3D; (tab &#x3D; resize()).length; &#x2F;&#x2F;可以看到，这是第一次扩容    </span><br><span class="line">       if ((p &#x3D; tab[i &#x3D; (n - 1) &amp; hash]) &#x3D;&#x3D; null)   &#x2F;&#x2F;计算槽位 (n - 1) &amp; hash]，为啥这么写呢，正常的思维是取模，这种位运算效率更高</span><br><span class="line">            tab[i] &#x3D; newNode(hash, key, value, null);      		</span><br><span class="line">      if (p.hash &#x3D;&#x3D; hash &amp;&amp;</span><br><span class="line">                ((k &#x3D; p.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k)))) &#x2F;&#x2F;看存在的判断，先判断hashcode是否相等，再判断值，这里为啥要覆写equals 方法得到体现</span><br><span class="line">      else &#123;</span><br><span class="line">                for (int binCount &#x3D; 0; ; ++binCount) &#123;</span><br><span class="line">                    if ((e &#x3D; p.next) &#x3D;&#x3D; null) &#123;</span><br><span class="line">                        p.next &#x3D; newNode(hash, key, value, null);</span><br><span class="line">                        if (binCount &gt;&#x3D; TREEIFY_THRESHOLD - 1) &#x2F;&#x2F; -1 for 1st  &#x2F;&#x2F;当node超过8时转成了红黑树</span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (e.hash &#x3D;&#x3D; hash &amp;&amp;</span><br><span class="line">                        ((k &#x3D; e.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))))</span><br><span class="line">                        break;</span><br><span class="line">                    p &#x3D; e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br></pre></td></tr></table></figure>

<h5 id="hashMap-死循环"><a href="#hashMap-死循环" class="headerlink" title="hashMap 死循环"></a>hashMap 死循环</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.7 的时候，hash 重复的时候采用的是头插，直接替换之前的元素，替换下来的元素放在链表中,所以会有概率形成环型链表</span><br><span class="line">1.8 的时候采用的尾插，resize 的时候链表顺序不变</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>linux优化</title>
    <url>/2021/04/16/linux%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h5 id="最大文件描述符"><a href="#最大文件描述符" class="headerlink" title="最大文件描述符"></a>最大文件描述符</h5><p>查看用户级文件描述符限制<br>ulimit -n</p>
<h5 id="常用性能检测工具"><a href="#常用性能检测工具" class="headerlink" title="常用性能检测工具"></a>常用性能检测工具</h5><ol>
<li>mpstat 实时监测系统每个CPU的使用情况<br>mpstat -P ALL 5 2 每隔5秒输出一次结果，共输出两次</li>
</ol>
<p>-P 指定监听CPU数量 ALL表示所有的</p>
<ol>
<li><p>ifstat 网络流量检测工具<br>ifstat -a 2 5 每隔2秒输出一次结果，共输出5次</p>
<span id="more"></span></li>
</ol>
<p>-a 检测系统上的所有网卡<br>-i 置顶要检测的网卡接口<br>-t 在每行输出信息前加上时间戳<br>-b 以Kbit/s 为单位显示数据，而不是默认的KB/s</p>
<ol>
<li>vmstat 显示Linux系统虚拟内存状态，也可以报告关于进程、内存、I/O等系统整体运行状态</li>
</ol>
<p>-a：显示活跃和非活跃内存<br>-f：显示从系统启动至今的fork数量 。<br>-m：显示slabinfo<br>-n：只在开始时显示一次各字段名称。<br>-s：显示内存相关统计信息及多种系统活动数量。<br>delay：刷新时间间隔。如果不指定，只显示一条结果。<br>count：刷新次数。如果不指定刷新次数，但指定了刷新时间间隔，这时刷新次数为无穷。<br>-d：显示磁盘相关统计信息。<br>-p：显示指定磁盘分区统计信息<br>-S：使用指定单位显示。参数有 k 、K 、m 、M ，分别代表1000、1024、1000000、1048576字节（byte）。默认单位为K（1024 bytes）<br>-V：显示vmstat版本信息<br>结果说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@dev-kz ~]# vmstat -a</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 8  0      0 6551064 1505368 7826268    0    0    28   204    2    1  4  1 95  0  0</span><br><span class="line"> procs</span><br><span class="line"> r:	运行队列中进程数量，这个值也可以判断是否需要增加CPU。（长期大于1）</span><br><span class="line"> b	等待IO的进程数量。</span><br><span class="line"> memory 单位为kb</span><br><span class="line"> swpd	使用虚拟内存大小，如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能。</span><br><span class="line"> free	空闲物理内存大小。</span><br><span class="line"> buff	用作缓冲的内存大小。</span><br><span class="line"> cache	用作缓存的内存大小，如果cache的值大的时候，说明cache处的文件数多，如果频繁访问到的文件都能被cache处，那么磁盘的读IO bi会非常小。</span><br><span class="line"> 显示活跃和非活跃内存，显示增加了inact和active列</span><br><span class="line"> Swap</span><br><span class="line">si	每秒从交换区写到内存的大小，由磁盘调入内存。</span><br><span class="line">so	每秒写入交换区的内存大小，由内存调入磁盘。</span><br><span class="line">#注意：内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响，磁盘IO和CPU资源都会被消耗。有些朋友看到空闲内存（free）很少的或接近于0时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少（大多时候是0），那么不用担心，系统性能这时不会受到影响的。因为linux总是先把内存用光#</span><br><span class="line">IO</span><br><span class="line">bi	每秒读取的块数</span><br><span class="line">bo	每秒写入的块数</span><br><span class="line">#注意：随机磁盘读写的时候，这2个值越大（如超出1024k)，能看到CPU在IO等待的值也会越大。#</span><br><span class="line">system（系统）</span><br><span class="line">in	每秒中断数，包括时钟中断。</span><br><span class="line">cs	每秒上下文切换数。</span><br><span class="line">#注意：上面2个值越大，会看到由内核消耗的CPU时间会越大。#</span><br><span class="line">CPU（以百分比表示）</span><br><span class="line">us	用户进程执行时间百分比(user time) us的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。</span><br><span class="line">sy:	内核系统进程执行时间百分比(system time) sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。</span><br><span class="line">wa	IO等待时间百分比 wa的值高时，说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。</span><br><span class="line">id	空闲时间百分比</span><br><span class="line"></span><br><span class="line">vmstat 命令说明</span><br><span class="line">vmstat </span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 3  0      0 6409500 107068 3114000    0    0    28   204    2    1  4  1 95  0  0</span><br><span class="line"></span><br><span class="line">vmstat –a 显示活跃和非活跃内存，显示增加了inact和active列，</span><br><span class="line">vmstat -a</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 2  0      0 6404564 1564288 7906164    0    0    28   204    2    1  4  1 95  0  0</span><br><span class="line"></span><br><span class="line"> vmstat -s 查看内存使用的详细信息</span><br><span class="line"># vmstat -s</span><br><span class="line">     16266396 K total memory</span><br><span class="line">      6630016 K used memory</span><br><span class="line">      7911380 K active memory</span><br><span class="line">      1569920 K inactive memory</span><br><span class="line">      6393512 K free memory</span><br><span class="line">       107912 K buffer memory</span><br><span class="line">      3134956 K swap cache</span><br><span class="line">            0 K total swap</span><br><span class="line">            0 K used swap</span><br><span class="line">            0 K free swap</span><br><span class="line">     63303097 non-nice user cpu ticks</span><br><span class="line">          874 nice user cpu ticks</span><br><span class="line">     15854910 system cpu ticks</span><br><span class="line">   1602624489 idle cpu ticks</span><br><span class="line">      2913879 IO-wait cpu ticks</span><br><span class="line">            0 IRQ cpu ticks</span><br><span class="line">       259139 softirq cpu ticks</span><br><span class="line">            0 stolen cpu ticks</span><br><span class="line">    475729903 pages paged in</span><br><span class="line">   3443010588 pages paged out</span><br><span class="line">            0 pages swapped in</span><br><span class="line">            0 pages swapped out</span><br><span class="line">   1541906602 interrupts</span><br><span class="line">   3663049957 CPU context switches</span><br><span class="line">   1557999201 boot time</span><br><span class="line">     18590338 forks</span><br><span class="line"></span><br><span class="line"> vmstat -d 查看磁盘的读&#x2F;写     </span><br><span class="line">vmstat -d</span><br><span class="line">disk- ------------reads------------ ------------writes----------- -----IO------</span><br><span class="line">       total merged sectors      ms  total merged sectors      ms    cur    sec</span><br><span class="line">vda   4765681 108195 951460566 89014815 18863838 19708386 6886046288 2548559282      0  36110</span><br><span class="line"></span><br><span class="line">查看&#x2F;dev&#x2F;sda1磁盘的读&#x2F;写</span><br><span class="line"># vmstat -p &#x2F;dev&#x2F;vda1</span><br><span class="line">vda1          reads   read sectors  writes    requested writes</span><br><span class="line">             4765849  951464366   18481572 6886084424</span><br></pre></td></tr></table></figure>

<ol>
<li>iostat iostat是I/O statistics（输入/输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析</li>
<li>mpstat 主要用于多CPU环境下，它显示各个可用CPU的状态系你想。这些信息存放在/proc/stat文件中。在多CPUs系统里，其不但能查看所有CPU的平均状况信息，而且能够查看特定CPU的信息。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> mpstat -P ALL</span><br><span class="line">Linux 3.10.0-693.11.6.el7.x86_64 (offline) 	2019年07月04日 	_x86_64_	(8 CPU)</span><br><span class="line"></span><br><span class="line">14时08分17秒  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">14时08分17秒  all    5.65    0.00    0.79    0.27    0.00    0.09    0.16    0.00    0.00   93.03</span><br><span class="line">14时08分17秒    0    5.13    0.00    0.78    0.07    0.00    0.08    0.13    0.00    0.00   93.80</span><br><span class="line">14时08分17秒    1    6.26    0.00    0.91    0.12    0.00    0.10    0.26    0.00    0.00   92.35</span><br><span class="line">14时08分17秒    2    6.41    0.00    0.91    0.11    0.00    0.09    0.14    0.00    0.00   92.34</span><br><span class="line">14时08分17秒    3    6.08    0.00    0.88    0.09    0.00    0.09    0.14    0.00    0.00   92.73</span><br><span class="line">14时08分17秒    4    5.72    0.00    0.75    0.08    0.00    0.05    0.13    0.00    0.00   93.26</span><br><span class="line">14时08分17秒    5    5.33    0.00    0.68    0.07    0.00    0.21    0.19    0.00    0.00   93.53</span><br><span class="line">14时08分17秒    6    5.04    0.00    0.67    0.06    0.00    0.09    0.16    0.00    0.00   93.98</span><br><span class="line">14时08分17秒    7    5.21    0.00    0.74    1.60    0.00    0.05    0.13    0.00    0.00   92.28</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>netstat 网络信息统计工具</li>
<li>strace 测试服务器性能</li>
<li>nc 快速构建网络连接</li>
<li>lsof 查看当前系统打开的文件描述符</li>
<li>tcpdump 网络抓包工具</li>
<li>wireshark 网络抓包工具</li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mac开发环境配置</title>
    <url>/2021/05/23/mac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="brew包管理安装"><a href="#brew包管理安装" class="headerlink" title="brew包管理安装"></a>brew包管理安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;bin&#x2F;zsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;cunkai&#x2F;HomebrewCN&#x2F;raw&#x2F;master&#x2F;Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<h4 id="git-ssh配置"><a href="#git-ssh配置" class="headerlink" title="git ssh配置"></a>git ssh配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 配置git用户名和邮箱</span><br><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;</span><br><span class="line">2. 生成ssh私钥和公钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">ssh-add ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">3. 将公钥加入到git的ssh私钥管理中</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mac 环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql学习笔记</title>
    <url>/2021/04/15/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h5 id="mysql-架构"><a href="#mysql-架构" class="headerlink" title="mysql 架构"></a>mysql 架构</h5><p>server （连接器，分析器，优化器，执行器）<br>引擎 提供数据存取的接口</p>
<h5 id="mysql-执行流程"><a href="#mysql-执行流程" class="headerlink" title="mysql 执行流程"></a>mysql 执行流程</h5><ol>
<li>连接器 负责处理客户端的连接<br>默认为8小时，八小时内没有活动，会自动断开<br>show global variables like ‘wait_timeout’; //28800<br>优化方法：<br>尽量使用长连接，但是使用长连接会使内存暴涨，因为连接其实都是在内存中的<br>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后， 断开连接，之后要查询再重连。<br>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执 行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权 限验证，但是会将连接恢复到刚刚创建完时的状态。</li>
</ol>
<span id="more"></span>

<ol>
<li>分析器 词法分析和语法分析<br>将sql语句进行解析，如果不识别报 You have an error in your SQL syntax”</li>
<li>优化器<br>选择最佳执行方法，如选择使用那个索引</li>
<li>执行器<br>根据优化器的结果去存储引擎取数据<br>你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程 中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。<br>在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。</li>
</ol>
<h5 id="日志-（两阶段提交）"><a href="#日志-（两阶段提交）" class="headerlink" title="日志 （两阶段提交）"></a>日志 （两阶段提交）</h5><ol>
<li><p>redo log 物理日志，引擎层</p>
<blockquote>
<p>当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log(粉 板)里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时 候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做<br>InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文 件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末 尾就又回到开头循环写，</p>
</blockquote>
</li>
<li><p>bin log 逻辑日志，server层</p>
</li>
<li><p>redo log 是 InnoDB 引擎特有的;binlog 是 MySQL 的 Server 层实现的，所有引擎 都可以使用。</p>
</li>
<li><p>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”;binlog 是逻辑日 志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</p>
</li>
<li><p>redo log 是循环写的，空间固定会用完;binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p>
</li>
</ol>
<blockquote>
<p>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1， 这样可以保证 MySQL 异常重启之后数据不丢失。<br>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个 参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p>
</blockquote>
<h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><p>索引模型</p>
<ol>
<li>哈希表<br>key-&gt;value 因为是不断追加的,不能做范围查找，遇到hash碰撞后会用链表连接起来</li>
<li>有序数组<br>数据是有序存放的的，但添加成本太大，会重建整个数组<br>有序数组索引只适用于静态存储引擎，比如你要保存的是 2017 年某个城市的所有 人口信息，这类不会再修改的数据。</li>
<li>搜索树<br>二叉树效率最快，但树太高，所以mysql采用的是n叉树，InnoDB的n为1200左右</li>
</ol>
<h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><p>特性：<br>ACID(Atomicity、Consistency、Isolation、Durability，即 原子性、一致性、隔离性、持久性)<br>隔离级别</p>
<ol>
<li>读未提交(read uncommitted) 一个事务还没提交时，它做的变更就能被别的事务看到<br>别人改数据的事务尚未提交，我在我的事务中也能读到。</li>
<li>读提交(read committed) 一个事务提交之后，它做的变更才会被其他事务看到<br>别人改数据的事务已经提交，我在我的事务中才能读到。<br>oracle 默认隔离级别</li>
<li>可重复读(repeatable read) 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。<br>别人改数据的事务已经提交，我在我的事务中也不去读。<br>mysql 的默认隔离级别</li>
<li>串行 化(serializable ) 对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行<br>我的事务尚未提交，别人就别想改数据<br>通过锁实现</li>
</ol>
<p>查看mysql隔离级别<br>show variables like ‘transaction_isolation’;</p>
<blockquote>
<p>特性：<br>ACID(Atomicity、Consistency、Isolation、Durability，即 原子性、一致性、隔离性、持久性)<br>隔离级别</p>
<ol>
<li>读未提交(read uncommitted) 一个事务还没提交时，它做的变更就能被别的事务看到<br>别人改数据的事务尚未提交，我在我的事务中也能读到。</li>
<li>读提交(read committed) 一个事务提交之后，它做的变更才会被其他事务看到<br>别人改数据的事务已经提交，我在我的事务中才能读到。<br>oracle 默认隔离级别</li>
<li>可重复读(repeatable read) 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。<br>别人改数据的事务已经提交，我在我的事务中也不去读。<br>mysql 的默认隔离级别</li>
<li>串行 化(serializable ) 对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行<br>我的事务尚未提交，别人就别想改数据<br>通过锁实现</li>
</ol>
<p>查看mysql隔离级别<br>show variables like ‘transaction_isolation’;</p>
</blockquote>
<h5 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h5><ol>
<li>全局锁</li>
</ol>
<ul>
<li>锁库<br>全局锁即对整个数据库实例加锁，使得整个库处于只读状态，会阻塞DML和DDL语句。<br>使用如下命令（简称FTWRL）可为数据库加全局锁：<br>flush tables with read lock;<br>释放全局锁命令如下：<br>unlock tables;<br>此外，在客户端异常断开后，全局锁会自动释</li>
</ul>
<p>官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持， 这个过程中数据是可以正常更新的。<br>single-transaction 方法只适用于所有的表使用事务引擎的库</p>
<ol>
<li>表级锁<br>表锁<br>元数据锁(meta data lock， MDL) 系统默认会加<br>MDL 会直到事务提交才释放，在做表结构变更的时候，你一定要小心不要导致锁住线上查 询和更新。<br>加锁 lock tables tb_name read/write;<br>解锁 unlock tables;</li>
</ol>
<ul>
<li>表锁用于用于为单个表加锁，表锁的类型分为读锁和写锁。</li>
<li>读锁</li>
<li><ul>
<li>当前进程只能读，不能写，写会报错，不能操做其他表，<br>其他进程能读，写会被阻塞</li>
</ul>
</li>
<li>写锁</li>
<li><ul>
<li>当前进程可以进行读写操作。不能操作其他表<br>其他进程读写会被阻塞</li>
</ul>
</li>
</ul>
<ol>
<li>行级锁</li>
</ol>
<h5 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h5><ol>
<li>它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结 果。创建视图的语法是 create view … ，而它的查询方法与表一样。</li>
<li>InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view， 用于支持 RC(Read Committed，读提交)和 RR(Repeatable Read，可重复读)隔 离级别的实现。</li>
</ol>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>node中多进程</title>
    <url>/2021/04/15/node%E4%B8%AD%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h5 id="实现背景"><a href="#实现背景" class="headerlink" title="实现背景"></a>实现背景</h5><p>node 中单进程，无法利用多核CPU, 解决办法，就是一个核跑一个进程</p>
<h5 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h5><h6 id="使用child-process-模块"><a href="#使用child-process-模块" class="headerlink" title="使用child-process 模块"></a>使用child-process 模块</h6><span id="more"></span>

<ol>
<li><p>exec exec可以用操作系统原生的方式执行各种命令，如管道 cat ab.txt | grep hello</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const childProcess&#x3D;require(&quot;child_process&quot;);</span><br><span class="line">childProcess.exec(&quot;cat &#x2F;Users&#x2F;sogubaby&#x2F;Desktop&#x2F;demo.txt&quot;,function(err,msg,srderr)&#123;</span><br><span class="line">  console.log(&quot;error&quot;,err);</span><br><span class="line">  console.log(&quot;res&quot;,msg);</span><br><span class="line">  console.log(&quot;strout&quot;,srderr);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">输出结果</span><br><span class="line">sogubaby ~&#x2F;Desktop&#x2F;learn_node&#x2F;manyprocess$node child-process.js </span><br><span class="line">error null</span><br><span class="line">res yedong</span><br><span class="line">yedong</span><br><span class="line"></span><br><span class="line">strout </span><br><span class="line"></span><br><span class="line">err:    执行中遇到的错误</span><br><span class="line">msg:    正确执行的结果</span><br><span class="line">strout  执行错误后终端中输出的结果</span><br></pre></td></tr></table></figure></li>
<li><p>execFile 执行一个文件</p>
</li>
<li><p>spawn</p>
</li>
<li><p>fork</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/05/23/php8/</url>
    <content><![CDATA[<h4 id="PHP8"><a href="#PHP8" class="headerlink" title="PHP8"></a>PHP8</h4><ol>
<li><p>Named arguments</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test($name,$age&#x3D;12,$sex&#x3D;&quot;boy&quot;)&#123;</span><br><span class="line">    echo $name.$age.$sex.&quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">test(&quot;hai&quot;,sex:&quot;girl&quot;);</span><br></pre></td></tr></table></figure></li>
<li><p>Attributes</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#[</span><br><span class="line">Route(&quot;&#x2F;api&#x2F;posts&#x2F;&#123;id&#125;&quot;, methods: [&quot;GET&quot;])</span><br><span class="line">]</span><br><span class="line">function testAttributes()&#123;</span><br><span class="line">    $ref &#x3D; new ReflectionFunction(&quot;testAttributes&quot;);</span><br><span class="line">    var_dump($ref-&gt;getAttributes(&quot;Route&quot;)[0]);</span><br><span class="line">    var_dump($ref-&gt;getAttributes(&quot;Route&quot;)[0]-&gt;getName());</span><br><span class="line">    var_dump($ref-&gt;getAttributes(&quot;Route&quot;)[0]-&gt;getArguments());</span><br><span class="line">&#125;</span><br><span class="line">testAttributes();</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li><p>Constructor property promotion</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">    public function __construct(</span><br><span class="line">    public float $x &#x3D; 0.0,</span><br><span class="line">    public float $y &#x3D; 0.0,</span><br><span class="line">    public float $z &#x3D; 0.0,</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">$point&#x3D;new Point();</span><br><span class="line">var_dump($point-&gt;x);</span><br><span class="line">var_dump($point-&gt;y);</span><br><span class="line">var_dump($point-&gt;z);</span><br></pre></td></tr></table></figure></li>
<li><p>Union types</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Number &#123;</span><br><span class="line">    public function __construct(</span><br><span class="line">       private int|float $number</span><br><span class="line">       ) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">new Number(&#39;88&#39;); </span><br><span class="line">new Number(&#39;ss88&#39;); &#x2F;&#x2F; TypeError</span><br><span class="line">new Number(&#39;88ss&#39;); &#x2F;&#x2F; TypeError</span><br></pre></td></tr></table></figure></li>
<li><p>Match expression</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo match (8.0) &#123;</span><br><span class="line"> &#39;8.0&#39; &#x3D;&gt; &quot;Oh no!&quot;,</span><br><span class="line">  8.0 &#x3D;&gt; &quot;This is what I expected&quot;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">1.Match is an expression, meaning its result can be stored in a variable or returned.</span><br><span class="line">2.Match branches only support single-line expressions and do not need a break; statement.</span><br><span class="line">3.Match does strict comparisons.</span><br></pre></td></tr></table></figure></li>
<li><p>Nullsafe operator</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$session&#x3D;null;</span><br><span class="line">$country &#x3D; $session?-&gt;user?-&gt;getAddress()?-&gt;country;</span><br><span class="line">var_dump($country);</span><br><span class="line"></span><br><span class="line">$country &#x3D; $session-&gt;user-&gt;getAddress()-&gt;country; &#x2F;&#x2F;Fatal error</span><br><span class="line">var_dump($country);</span><br></pre></td></tr></table></figure></li>
<li><p>Saner string to number comparisons</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 &#x3D;&#x3D; &#39;foobar&#39; &#x2F;&#x2F; false</span><br><span class="line">When comparing to a numeric string, PHP 8 uses a number comparison. Otherwise, it converts the number to a string and uses a string comparison.</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>Consistent type errors for internal functions</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strlen([]); &#x2F;&#x2F; TypeError: strlen(): Argument #1 ($str) must be of type string, array given</span><br><span class="line"></span><br><span class="line">array_chunk([], -1); &#x2F;&#x2F; ValueError: array_chunk(): Argument #2 ($length) must be greater than 0</span><br></pre></td></tr></table></figure></li>
<li><p>JIT</p>
<p><img src="/2021/05/23/php8/image-20210506152843857.png" alt="image-20210506152843857"></p>
</li>
<li><p>JIT基准测试</p>
<blockquote>
<p>cli</p>
<p><img src="/2021/05/23/php8/image-20210506153226230.png" alt="image-20210506153226230"></p>
<p><img src="/2021/05/23/php8/image-20210506153311221.png" alt="image-20210506153311221"></p>
</blockquote>
<blockquote>
<p>fpm</p>
<p><img src="/2021/05/23/php8/image-20210506153347728.png" alt="image-20210506153347728"></p>
</blockquote>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>php框架之laravel</title>
    <url>/2021/04/09/php%E6%A1%86%E6%9E%B6%E4%B9%8Blaravel/</url>
    <content><![CDATA[<h5 id="整体加载流程"><a href="#整体加载流程" class="headerlink" title="整体加载流程"></a>整体加载流程</h5><ol>
<li>index.php<span id="more"></span>  
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Laravel - A PHP Framework For Web Artisans</span><br><span class="line"> *</span><br><span class="line"> * @package  Laravel</span><br><span class="line"> * @author   Taylor Otwell &lt;taylor@laravel.com&gt;</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Register The Auto Loader</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| Composer provides a convenient, automatically generated class loader for</span><br><span class="line">| our application. We just need to utilize it! We&#39;ll simply require it</span><br><span class="line">| into the script here so that we don&#39;t have to worry about manual</span><br><span class="line">| loading any of our classes later on. It feels great to relax.</span><br><span class="line">|</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">require __DIR__.&#39;&#x2F;..&#x2F;bootstrap&#x2F;autoload.php&#39;; &#x2F;&#x2F;引入composer自动加载</span><br><span class="line"> </span><br><span class="line">&#x2F;*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Turn On The Lights</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| We need to illuminate PHP development, so let us turn on the lights.</span><br><span class="line">| This bootstraps the framework and gets it ready for use, then it</span><br><span class="line">| will load up this application so that we can run it and send</span><br><span class="line">| the responses back to the browser and delight our users.</span><br><span class="line">|</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">$app &#x3D; require_once __DIR__.&#39;&#x2F;..&#x2F;bootstrap&#x2F;app.php&#39;; &#x2F;&#x2F;整个应用的实例化,及初始化</span><br><span class="line">1. </span><br><span class="line">    public function __construct($basePath &#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($basePath) &#123;</span><br><span class="line">            $this-&gt;setBasePath($basePath);  &#x2F;&#x2F;设置各个模块的路径</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $this-&gt;registerBaseBindings(); &#x2F;&#x2F;将基础的容器绑定到app上</span><br><span class="line"></span><br><span class="line">        $this-&gt;registerBaseServiceProviders(); &#x2F;&#x2F;初始化三个基本的服务</span><br><span class="line">        	 $this-&gt;register(new EventServiceProvider($this)); &#x2F;&#x2F;事件，里面初始化了一个队列</span><br><span class="line">             $this-&gt;register(new LogServiceProvider($this)); &#x2F;&#x2F;日志</span><br><span class="line">             $this-&gt;register(new RoutingServiceProvider($this)); &#x2F;&#x2F;路由</span><br><span class="line"></span><br><span class="line">        $this-&gt;registerCoreContainerAliases(); &#x2F;&#x2F;注册一些框架的核心组件的别名到app上</span><br><span class="line">    &#125;</span><br><span class="line">2.</span><br><span class="line">实例化web 的核心</span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Http\Kernel::class,</span><br><span class="line">    App\Http\Kernel::class</span><br><span class="line">);</span><br><span class="line">实例化cli的核心，所以artisn 命令能够执行</span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Console\Kernel::class,</span><br><span class="line">    App\Console\Kernel::class</span><br><span class="line">);</span><br><span class="line">实例化全局异常处理</span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</span><br><span class="line">    App\Exceptions\Handler::class</span><br><span class="line">);    </span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Run The Application</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| Once we have the application, we can handle the incoming request</span><br><span class="line">| through the kernel, and send the associated response back to</span><br><span class="line">| the client&#39;s browser allowing them to enjoy the creative</span><br><span class="line">| and wonderful application we have prepared for them.</span><br><span class="line">|</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">$kernel &#x3D; $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response &#x3D; $kernel-&gt;handle(</span><br><span class="line">    $request &#x3D; Illuminate\Http\Request::capture()  &#x2F;&#x2F;通过$_GET $SERVER $_POST 构造Request</span><br><span class="line">);</span><br><span class="line">··· handle 核心方法</span><br><span class="line"> protected function sendRequestThroughRouter($request)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;app-&gt;instance(&#39;request&#39;, $request);</span><br><span class="line"></span><br><span class="line">        Facade::clearResolvedInstance(&#39;request&#39;);</span><br><span class="line"></span><br><span class="line">        $this-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">        return (new Pipeline($this-&gt;app))</span><br><span class="line">                    -&gt;send($request)</span><br><span class="line">                    -&gt;through($this-&gt;app-&gt;shouldSkipMiddleware() ? [] : $this-&gt;middleware)</span><br><span class="line">                    -&gt;then($this-&gt;dispatchToRouter());</span><br><span class="line">                    ...</span><br><span class="line">                    public function then(Closure $destination)</span><br><span class="line">    				&#123;</span><br><span class="line">        				$pipeline &#x3D; array_reduce(</span><br><span class="line">           				 array_reverse($this-&gt;pipes) &#x2F;&#x2F;中间件是倒叙执行的, $this-&gt;carry(), $this-          &gt;prepareDestination($destination)</span><br><span class="line">        				);</span><br><span class="line">        				return $pipeline($this-&gt;passable);</span><br><span class="line">    				&#125;</span><br><span class="line">                    </span><br><span class="line">    &#125;</span><br><span class="line">···</span><br><span class="line"></span><br><span class="line">$response-&gt;send();  &#x2F;&#x2F;response 发送数据 pipeline</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$kernel-&gt;terminate($request, $response); &#x2F;&#x2F;调用一些回调中间件</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>php framework</tag>
      </tags>
  </entry>
</search>
